// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using toDoApp.Repositories;

namespace toDoApp.Migrations
{
    [DbContext(typeof(ToDoAppContext))]
    [Migration("20190619161257_FirstChange")]
    partial class FirstChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("toDoApp.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Exp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("MoneySent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Money_sent")
                        .HasColumnType("numeric(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("toDoApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("toDoApp.Models.CharityFundation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Charity_fundations");
                });

            modelBuilder.Entity("toDoApp.Models.DonationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharityFundationId");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 6, 19, 18, 12, 57, 698, DateTimeKind.Local).AddTicks(4874));

                    b.Property<decimal>("Funds");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CharityFundationId");

                    b.HasIndex("UserId");

                    b.ToTable("Donation_histories");
                });

            modelBuilder.Entity("toDoApp.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("LooseCharityPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(5, 2)")
                        .HasDefaultValue(1m);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Reward")
                        .HasColumnType("numeric(5, 2)");

                    b.Property<decimal>("ToDoCharityPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(5, 2)")
                        .HasDefaultValue(90m);

                    b.Property<int>("ToDoId");

                    b.Property<decimal>("WinCharityPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(5, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ToDoId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("toDoApp.Models.GoalCategory", b =>
                {
                    b.Property<int>("GoalId");

                    b.Property<int>("CategoryId");

                    b.HasKey("GoalId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Goal_Category");
                });

            modelBuilder.Entity("toDoApp.Models.Privilage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Privilages");
                });

            modelBuilder.Entity("toDoApp.Models.PrivilageRank", b =>
                {
                    b.Property<int>("PrivilageId");

                    b.Property<int>("RankId");

                    b.HasKey("PrivilageId", "RankId");

                    b.HasIndex("RankId");

                    b.ToTable("Privilage_Rank");
                });

            modelBuilder.Entity("toDoApp.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Exp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("toDoApp.Models.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("toDoApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int?>("GoalId");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<int>("RankId");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RankId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("toDoApp.Models.Account", b =>
                {
                    b.HasOne("toDoApp.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("toDoApp.Models.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toDoApp.Models.DonationHistory", b =>
                {
                    b.HasOne("toDoApp.Models.CharityFundation", "CharityFundation")
                        .WithMany("DonationHistories")
                        .HasForeignKey("CharityFundationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toDoApp.Models.User", "User")
                        .WithMany("DonationHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toDoApp.Models.Goal", b =>
                {
                    b.HasOne("toDoApp.Models.ToDo", "ToDo")
                        .WithMany("Goals")
                        .HasForeignKey("ToDoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toDoApp.Models.GoalCategory", b =>
                {
                    b.HasOne("toDoApp.Models.Category", "Category")
                        .WithMany("GoalCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toDoApp.Models.Goal", "Goal")
                        .WithMany("GoalCategories")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toDoApp.Models.PrivilageRank", b =>
                {
                    b.HasOne("toDoApp.Models.Privilage", "Privilage")
                        .WithMany("PrivilageRanks")
                        .HasForeignKey("PrivilageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toDoApp.Models.Rank", "Rank")
                        .WithMany("PrivilageRanks")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toDoApp.Models.User", b =>
                {
                    b.HasOne("toDoApp.Models.Goal")
                        .WithMany("Users")
                        .HasForeignKey("GoalId");

                    b.HasOne("toDoApp.Models.Rank", "Rank")
                        .WithOne("User")
                        .HasForeignKey("toDoApp.Models.User", "RankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
